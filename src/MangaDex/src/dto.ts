/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/ping": {
    get: {
      responses: {
        /** Pong */
        200: {
          content: {
            "application/json": string;
          };
        };
      };
    };
  };
  "/manga": {
    /** Search a list of Manga. */
    get: operations["get-search-manga"];
    /** Create a new Manga. */
    post: operations["post-manga"];
  };
  "/manga/{id}/aggregate": {
    get: {
      parameters: {
        path: {
          /** Manga ID */
          id: string;
        };
        query: {
          "translatedLanguage[]"?: string[];
          "groups[]"?: string[];
        };
      };
      responses: {
        /** OK */
        200: {
          content: {
            "application/json": {
              /** @default ok */
              result?: string;
              volumes?: {
                [key: string]: {
                  volume?: string;
                  count?: number;
                  chapters?: {
                    [key: string]: {
                      chapter?: string;
                      /** Format: uuid */
                      id?: string;
                      others?: string[];
                      count?: number;
                    };
                  };
                };
              };
            };
          };
        };
      };
    };
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
  };
  "/manga/{id}": {
    /** View Manga. */
    get: operations["get-manga-id"];
    put: operations["put-manga-id"];
    delete: operations["delete-manga-id"];
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
  };
  "/auth/login": {
    post: operations["post-auth-login"];
  };
  "/auth/check": {
    get: operations["get-auth-check"];
  };
  "/auth/logout": {
    post: operations["post-auth-logout"];
  };
  "/auth/refresh": {
    post: operations["post-auth-refresh"];
  };
  "/account/create": {
    post: operations["post-account-create"];
  };
  "/account/activate/{code}": {
    post: operations["get-account-activate-code"];
    parameters: {
      path: {
        code: string;
      };
    };
  };
  "/group": {
    get: operations["get-search-group"];
    post: operations["post-group"];
  };
  "/group/{id}": {
    get: operations["get-group-id"];
    put: operations["put-group-id"];
    delete: operations["delete-group-id"];
    parameters: {
      path: {
        /** Scanlation Group ID */
        id: string;
      };
    };
  };
  "/group/{id}/follow": {
    post: operations["post-group-id-follow"];
    delete: operations["delete-group-id-follow"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/list": {
    post: operations["post-list"];
  };
  "/list/{id}": {
    get: operations["get-list-id"];
    /** The size of the body is limited to 8KB. */
    put: operations["put-list-id"];
    delete: operations["delete-list-id"];
    parameters: {
      path: {
        /** CustomList ID */
        id: string;
      };
    };
  };
  "/manga/{id}/list/{listId}": {
    post: operations["post-manga-id-list-listId"];
    delete: operations["delete-manga-id-list-listId"];
    parameters: {
      path: {
        /** Manga ID */
        id: string;
        /** CustomList ID */
        listId: string;
      };
    };
  };
  "/user/list": {
    /** This will list public and private CustomList */
    get: operations["get-user-list"];
  };
  "/user/{id}/list": {
    /** This will list only public CustomList */
    get: operations["get-user-id-list"];
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
    };
  };
  "/user": {
    get: operations["get-user"];
  };
  "/user/{id}": {
    get: operations["get-user-id"];
    delete: operations["delete-user-id"];
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
    };
  };
  "/user/delete/{code}": {
    post: operations["post-user-delete-code"];
    parameters: {
      path: {
        /** User delete code */
        code: string;
      };
    };
  };
  "/user/password": {
    post: operations["post-user-password"];
  };
  "/user/email": {
    post: operations["post-user-email"];
  };
  "/chapter": {
    /** Chapter list. If you want the Chapters of a given Manga, please check the feed endpoints. */
    get: operations["get-chapter"];
    parameters: {};
  };
  "/chapter/{id}": {
    get: operations["get-chapter-id"];
    put: operations["put-chapter-id"];
    delete: operations["delete-chapter-id"];
    parameters: {
      path: {
        /** Chapter ID */
        id: string;
      };
    };
  };
  "/user/follows/manga/feed": {
    get: operations["get-user-follows-manga-feed"];
  };
  "/list/{id}/feed": {
    get: operations["get-list-id-feed"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/manga/{id}/follow": {
    post: operations["post-manga-id-follow"];
    delete: operations["delete-manga-id-follow"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/cover": {
    get: operations["get-cover"];
  };
  "/cover/{mangaOrCoverId}": {
    get: operations["get-cover-id"];
    put: operations["edit-cover"];
    post: operations["upload-cover"];
    delete: operations["delete-cover"];
    parameters: {
      path: {
        /** Is Manga UUID on POST */
        mangaOrCoverId: string;
      };
    };
  };
  "/author": {
    get: operations["get-author"];
    post: operations["post-author"];
  };
  "/author/{id}": {
    get: operations["get-author-id"];
    put: operations["put-author-id"];
    delete: operations["delete-author-id"];
    parameters: {
      path: {
        /** Author ID */
        id: string;
      };
    };
  };
  "/legacy/mapping": {
    post: operations["post-legacy-mapping"];
  };
  "/manga/{id}/feed": {
    get: operations["get-manga-id-feed"];
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
  };
  "/manga/{id}/read": {
    /** A list of chapter ids that are marked as read for the specified manga */
    get: operations["get-manga-chapter-readmarkers"];
    /** Send a lot of chapter ids for one manga to mark as read and/or unread */
    post: operations["post-manga-chapter-readmarkers"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/manga/read": {
    /** A list of chapter ids that are marked as read for the given manga ids */
    get: operations["get-manga-chapter-readmarkers-2"];
  };
  "/chapter/{id}/read": {
    /** Mark chapter as read for the current user */
    post: operations["chapter-id-read"];
    /** Mark chapter as unread for the current user */
    delete: operations["chapter-id-unread"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/manga/random": {
    get: operations["get-manga-random"];
  };
  "/at-home/server/{chapterId}": {
    get: operations["get-at-home-server-chapterId"];
    parameters: {
      path: {
        /** Chapter ID */
        chapterId: string;
      };
    };
  };
  "/manga/tag": {
    get: operations["get-manga-tag"];
  };
  "/account/activate/resend": {
    post: operations["post-account-activate-resend"];
  };
  "/account/recover": {
    /** You can only request Account Recovery once per Hour for the same Email Address */
    post: operations["post-account-recover"];
  };
  "/account/recover/{code}": {
    post: operations["post-account-recover-code"];
    parameters: {
      path: {
        code: string;
      };
    };
  };
  "/user/me": {
    get: operations["get-user-me"];
  };
  "/user/follows/group": {
    get: operations["get-user-follows-group"];
  };
  "/user/follows/group/{id}": {
    get: operations["get-user-follows-group-id"];
    parameters: {
      path: {
        /** Scanlation Group id */
        id: string;
      };
    };
  };
  "/user/follows/user": {
    get: operations["get-user-follows-user"];
  };
  "/user/follows/user/{id}": {
    get: operations["get-user-follows-user-id"];
    parameters: {
      path: {
        /** User id */
        id: string;
      };
    };
  };
  "/user/follows/manga": {
    get: operations["get-user-follows-manga"];
  };
  "/user/follows/manga/{id}": {
    get: operations["get-user-follows-manga-id"];
    parameters: {
      path: {
        /** Manga id */
        id: string;
      };
    };
  };
  "/manga/status": {
    get: operations["get-manga-status"];
  };
  "/manga/{id}/status": {
    get: operations["get-manga-id-status"];
    post: operations["post-manga-id-status"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/manga/draft/{id}": {
    get: operations["get-manga-id-draft"];
    parameters: {
      path: {
        id: string;
      };
      query: {
        "includes[]"?: string[];
      };
    };
  };
  "/manga/draft/{id}/commit": {
    post: operations["commit-manga-draft"];
    parameters: {
      path: {
        id: string;
      };
    };
  };
  "/manga/draft": {
    get: operations["get-manga-drafts"];
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        user?: string;
        state?: "draft" | "submitted" | "rejected";
        order?: {
          title?: "asc" | "desc";
          year?: "asc" | "desc";
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
        };
        "includes[]"?: string[];
      };
    };
  };
  "/captcha/solve": {
    /**
     * Captchas can be solved explicitly through this endpoint, another way is to add a `X-Captcha-Result` header to any request. The same logic will verify the captcha and is probably more convenient because it takes one less request.
     *
     * Authentication is optional. Captchas are tracked for both the client ip and for the user id, if you are logged in you want to send your session token but that is not required.
     */
    post: operations["post-captcha-solve"];
  };
  "/report/reasons/{category}": {
    get: operations["get-report-reasons-by-category"];
    parameters: {
      path: {
        category: "manga" | "chapter" | "scanlation_group" | "user" | "author";
      };
    };
  };
  "/report": {
    post: operations["post-report"];
  };
  "/upload": {
    get: operations["get-upload-session"];
  };
  "/upload/begin": {
    post: operations["begin-upload-session"];
  };
  "/upload/begin/{chapterId}": {
    post: operations["begin-edit-session"];
    parameters: {
      path: {
        chapterId: string;
      };
    };
  };
  "/upload/{uploadSessionId}": {
    post: operations["put-upload-session-file"];
    delete: operations["abandon-upload-session"];
    parameters: {
      path: {
        uploadSessionId: string;
      };
    };
  };
  "/upload/{uploadSessionId}/commit": {
    post: operations["commit-upload-session"];
    parameters: {
      path: {
        uploadSessionId: string;
      };
    };
  };
  "/upload/{uploadSessionId}/{uploadSessionFileId}": {
    delete: operations["delete-uploaded-session-file"];
    parameters: {
      path: {
        uploadSessionId: string;
        uploadSessionFileId: string;
      };
    };
  };
  "/upload/{uploadSessionId}/batch": {
    delete: operations["delete-uploaded-session-files"];
    parameters: {
      path: {
        uploadSessionId: string;
      };
    };
  };
  "/manga/{mangaId}/relation": {
    get: operations["get-manga-relation"];
    /** Create a new Manga relation. */
    post: operations["post-manga-relation"];
    parameters: {
      path: {
        mangaId: string;
      };
    };
  };
  "/manga/{mangaId}/relation/{id}": {
    delete: operations["delete-manga-relation-id"];
    parameters: {
      path: {
        mangaId: string;
        id: string;
      };
    };
  };
  "/rating": {
    get: operations["get-rating"];
  };
  "/rating/{mangaId}": {
    post: operations["post-rating-manga-id"];
    delete: operations["delete-rating-manga-id"];
    parameters: {
      path: {
        mangaId: string;
      };
    };
  };
  "/statistics/manga/{uuid}": {
    get: operations["get-statistics-manga-uuid"];
  };
  "/statistics/manga": {
    get: operations["get-statistics-manga"];
  };
}

export interface components {
  schemas: {
    /** MangaRequest */
    MangaRequest: {
      title?: components["schemas"]["LocalizedString"];
      altTitles?: components["schemas"]["LocalizedString"][];
      description?: components["schemas"]["LocalizedString"];
      authors?: string[];
      artists?: string[];
      links?: { [key: string]: string };
      originalLanguage?: string;
      lastVolume?: string | null;
      lastChapter?: string | null;
      publicationDemographic?:
        | ("shounen" | "shoujo" | "josei" | "seinen")
        | null;
      status?: "ongoing" | "completed" | "hiatus" | "cancelled";
      /** @description Year of release */
      year?: number | null;
      contentRating?: "safe" | "suggestive" | "erotica" | "pornographic";
      tags?: string[];
      /** Format: uuid */
      primaryCover?: string | null;
      version?: number;
    };
    /** LocalizedString */
    LocalizedString: { [key: string]: string };
    /** MangaResponse */
    MangaResponse: {
      result?: "ok" | "error";
      /** @default entity */
      response?: string;
      data?: components["schemas"]["Manga"];
    };
    /** ChapterResponse */
    ChapterResponse: {
      result?: "ok" | "error";
      /** @default entity */
      response?: string;
      data?: components["schemas"]["Chapter"];
    };
    /** Relationship */
    Relationship: {
      /** Format: uuid */
      id?: string;
      type?: string;
      /** @description Related Manga type, only present if you are on a Manga entity and a Manga relationship */
      related?:
        | "monochrome"
        | "main_story"
        | "adapted_from"
        | "based_on"
        | "prequel"
        | "side_story"
        | "doujinshi"
        | "same_franchise"
        | "shared_universe"
        | "sequel"
        | "spin_off"
        | "alternate_story"
        | "alternate_version"
        | "preserialization"
        | "colored"
        | "serialization";
      /** @description If Reference Expansion is applied, contains objects attributes */
      attributes?: { [key: string]: unknown } | null;
    };
    /** Chapter */
    Chapter: {
      /** Format: uuid */
      id?: string;
      type?: "chapter";
      attributes?: components["schemas"]["ChapterAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** Manga */
    Manga: {
      /** Format: uuid */
      id?: string;
      type?: "manga";
      attributes?: components["schemas"]["MangaAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** ErrorResponse */
    ErrorResponse: {
      /** @default error */
      result?: string;
      errors?: components["schemas"]["Error"][];
    };
    /** Error */
    Error: {
      id?: string;
      status?: number;
      title?: string;
      detail?: string;
    };
    /** ChapterAttributes */
    ChapterAttributes: {
      title?: string;
      volume?: string | null;
      chapter?: string | null;
      /** @description Count of readable images for this chapter */
      pages?: number;
      translatedLanguage?: string;
      /** Format: uuid */
      uploader?: string;
      /** @description Denotes a chapter that links to an external source. */
      externalUrl?: string | null;
      version?: number;
      createdAt?: string;
      updatedAt?: string;
      publishAt?: string;
    };
    /** MangaAttributes */
    MangaAttributes: {
      title?: components["schemas"]["LocalizedString"];
      altTitles?: components["schemas"]["LocalizedString"][];
      description?: components["schemas"]["LocalizedString"];
      isLocked?: boolean;
      links?: { [key: string]: string };
      originalLanguage?: string;
      lastVolume?: string | null;
      lastChapter?: string | null;
      publicationDemographic?:
        | ("shounen" | "shoujo" | "josei" | "seinen")
        | null;
      status?: string | null;
      /** @description Year of release */
      year?: number | null;
      contentRating?: "safe" | "suggestive" | "erotica" | "pornographic";
      tags?: components["schemas"]["Tag"][];
      state?: "draft" | "submitted" | "published" | "rejected";
      version?: number;
      createdAt?: string;
      updatedAt?: string;
    };
    MangaCreate: components["schemas"]["MangaRequest"] & unknown;
    MangaEdit: components["schemas"]["MangaRequest"] & unknown;
    ChapterEdit: components["schemas"]["ChapterRequest"] & unknown;
    /** Response */
    Response: {
      result?: "ok" | "error";
    };
    /** Login */
    Login: {
      username?: string;
      email?: string;
      password: string;
    };
    /** LoginResponse */
    LoginResponse: {
      result?: "ok" | "error";
      token?: {
        session?: string;
        refresh?: string;
      };
    };
    /** CheckResponse */
    CheckResponse: {
      /** @default ok */
      result?: string;
      isAuthenticated?: boolean;
      roles?: string[];
      permissions?: string[];
    };
    /** LogoutResponse */
    LogoutResponse: {
      result?: "ok" | "error";
    };
    /** RefreshToken */
    RefreshToken: {
      token: string;
    };
    /** RefreshResponse */
    RefreshResponse: {
      result: "ok" | "error";
      token?: {
        session?: string;
        refresh?: string;
      };
      message?: string;
    };
    /** AccountActivateResponse */
    AccountActivateResponse: {
      result?: "ok";
    };
    /** CreateAccount */
    CreateAccount: {
      username: string;
      password: string;
      /** Format: email */
      email: string;
    };
    /** ScanlationGroupResponse */
    ScanlationGroupResponse: {
      result?: "ok";
      /** @default entity */
      response?: string;
      data?: components["schemas"]["ScanlationGroup"];
    };
    /** ScanlationGroup */
    ScanlationGroup: {
      /** Format: uuid */
      id?: string;
      type?: "scanlation_group";
      attributes?: components["schemas"]["ScanlationGroupAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** ScanlationGroupAttributes */
    ScanlationGroupAttributes: {
      name?: string;
      altNames?: components["schemas"]["LocalizedString"][];
      website?: string | null;
      ircServer?: string | null;
      ircChannel?: string | null;
      discord?: string | null;
      contactEmail?: string | null;
      description?: string | null;
      /** Format: uri */
      twitter?: string | null;
      focusedLanguage?: string[] | null;
      locked?: boolean;
      official?: boolean;
      inactive?: boolean;
      /**
       * @description Should respected ISO 8601 duration specification: https://en.wikipedia.org/wiki/ISO_8601#Durations
       * @example P4D
       */
      publishDelay?: string;
      version?: number;
      createdAt?: string;
      updatedAt?: string;
    };
    /** User */
    User: {
      /** Format: uuid */
      id?: string;
      type?: "user";
      attributes?: components["schemas"]["UserAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** UserAttributes */
    UserAttributes: {
      username?: string;
      roles?: string[];
      version?: number;
    };
    /** CreateScanlationGroup */
    CreateScanlationGroup: {
      name: string;
      website?: string | null;
      ircServer?: string | null;
      ircChannel?: string | null;
      discord?: string | null;
      contactEmail?: string | null;
      description?: string | null;
      /** Format: uri */
      twitter?: string | null;
      inactive?: boolean;
      publishDelay?: string | null;
    };
    /** ScanlationGroupEdit */
    ScanlationGroupEdit: {
      name?: string;
      /** Format: uuid */
      leader?: string;
      members?: string[];
      website?: string | null;
      ircServer?: string | null;
      ircChannel?: string | null;
      discord?: string | null;
      contactEmail?: string | null;
      description?: string | null;
      /** Format: uri */
      twitter?: string | null;
      focusedLanguages?: string[] | null;
      inactive?: boolean;
      locked?: boolean;
      publishDelay?: string;
      version: number;
    };
    /** CustomListCreate */
    CustomListCreate: {
      name: string;
      visibility?: "public" | "private";
      manga?: string[];
      version?: number;
    };
    /** CustomListEdit */
    CustomListEdit: {
      name?: string;
      visibility?: "public" | "private";
      manga?: string[];
      version: number;
    };
    /** CustomListResponse */
    CustomListResponse: {
      result?: "ok" | "error";
      /** @default entity */
      response?: string;
      data?: components["schemas"]["CustomList"];
    };
    /** CustomList */
    CustomList: {
      /** Format: uuid */
      id?: string;
      type?: "custom_list";
      attributes?: components["schemas"]["CustomListAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** CustomListAttributes */
    CustomListAttributes: {
      name?: string;
      visibility?: "private" | "public";
      version?: number;
    };
    /** CoverResponse */
    CoverResponse: {
      result?: string;
      /** @default entity */
      response?: string;
      data?: components["schemas"]["Cover"];
    };
    /** Cover */
    Cover: {
      /** Format: uuid */
      id?: string;
      type?: "cover_art";
      attributes?: components["schemas"]["CoverAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** CoverAttributes */
    CoverAttributes: {
      volume?: string | null;
      fileName?: string;
      description?: string | null;
      version?: number;
      createdAt?: string;
      updatedAt?: string;
    };
    /** CoverEdit */
    CoverEdit: {
      volume: string | null;
      description?: string | null;
      version: number;
    };
    /** AuthorResponse */
    AuthorResponse: {
      result?: string;
      /** @default entity */
      response?: string;
      data?: components["schemas"]["Author"];
    };
    /** Author */
    Author: {
      /** Format: uuid */
      id?: string;
      type?: "author";
      attributes?: components["schemas"]["AuthorAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** AuthorAttributes */
    AuthorAttributes: {
      name?: string;
      imageUrl?: string;
      biography?: components["schemas"]["LocalizedString"];
      /** Format: uri */
      twitter?: string | null;
      /** Format: uri */
      pixiv?: string | null;
      /** Format: uri */
      melonBook?: string | null;
      /** Format: uri */
      fanBox?: string | null;
      /** Format: uri */
      booth?: string | null;
      /** Format: uri */
      nicoVideo?: string | null;
      /** Format: uri */
      skeb?: string | null;
      /** Format: uri */
      fantia?: string | null;
      /** Format: uri */
      tumblr?: string | null;
      /** Format: uri */
      youtube?: string | null;
      /** Format: uri */
      weibo?: string | null;
      /** Format: uri */
      naver?: string | null;
      /** Format: uri */
      website?: string | null;
      version?: number;
      createdAt?: string;
      updatedAt?: string;
    };
    /** AuthorEdit */
    AuthorEdit: {
      name?: string;
      biography?: components["schemas"]["LocalizedString"];
      /** Format: uri */
      twitter?: string | null;
      /** Format: uri */
      pixiv?: string | null;
      /** Format: uri */
      melonBook?: string | null;
      /** Format: uri */
      fanBox?: string | null;
      /** Format: uri */
      booth?: string | null;
      /** Format: uri */
      nicoVideo?: string | null;
      /** Format: uri */
      skeb?: string | null;
      /** Format: uri */
      fantia?: string | null;
      /** Format: uri */
      tumblr?: string | null;
      /** Format: uri */
      youtube?: string | null;
      /** Format: uri */
      weibo?: string | null;
      /** Format: uri */
      naver?: string | null;
      /** Format: uri */
      website?: string | null;
      version: number;
    };
    /** AuthorCreate */
    AuthorCreate: {
      name: string;
      biography?: components["schemas"]["LocalizedString"];
      /** Format: uri */
      twitter?: string | null;
      /** Format: uri */
      pixiv?: string | null;
      /** Format: uri */
      melonBook?: string | null;
      /** Format: uri */
      fanBox?: string | null;
      /** Format: uri */
      booth?: string | null;
      /** Format: uri */
      nicoVideo?: string | null;
      /** Format: uri */
      skeb?: string | null;
      /** Format: uri */
      fantia?: string | null;
      /** Format: uri */
      tumblr?: string | null;
      /** Format: uri */
      youtube?: string | null;
      /** Format: uri */
      weibo?: string | null;
      /** Format: uri */
      naver?: string | null;
      /** Format: uri */
      website?: string | null;
      version?: number;
    };
    /** MappingIdBody */
    MappingIdBody: {
      type?: "group" | "manga" | "chapter" | "tag";
      ids?: number[];
    };
    /** MappingIdResponse */
    MappingIdResponse: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["MappingId"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** MappingId */
    MappingId: {
      /** Format: uuid */
      id?: string;
      type?: "mapping_id";
      attributes?: components["schemas"]["MappingIdAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** MappingIdAttributes */
    MappingIdAttributes: {
      type?: "manga" | "chapter" | "group" | "tag";
      legacyId?: number;
      /** Format: uuid */
      newId?: string;
    };
    /** TagResponse */
    TagResponse: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["Tag"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** Tag */
    Tag: {
      /** Format: uuid */
      id?: string;
      type?: "tag";
      attributes?: components["schemas"]["TagAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** TagAttributes */
    TagAttributes: {
      name?: components["schemas"]["LocalizedString"];
      description?: components["schemas"]["LocalizedString"];
      group?: string;
      version?: number;
    };
    /** UserResponse */
    UserResponse: {
      result?: "ok";
      /** @default entity */
      response?: string;
      data?: components["schemas"]["User"];
    };
    /** SendAccountActivationCode */
    SendAccountActivationCode: {
      /** Format: email */
      email: string;
    };
    /** RecoverCompleteBody */
    RecoverCompleteBody: {
      newPassword: string;
    };
    /** UpdateMangaStatus */
    UpdateMangaStatus: {
      status:
        | (
            | "reading"
            | "on_hold"
            | "plan_to_read"
            | "dropped"
            | "re_reading"
            | "completed"
          )
        | null;
    };
    /** ChapterRequest */
    ChapterRequest: {
      title?: string | null;
      volume?: string | null;
      chapter?: string | null;
      translatedLanguage?: string;
      groups?: string[];
      version?: number;
    };
    /** CoverList */
    CoverList: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["Cover"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** AuthorList */
    AuthorList: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["Author"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** ChapterList */
    ChapterList: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["Chapter"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** ScanlationGroupList */
    ScanlationGroupList: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["ScanlationGroup"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    MangaRelationCreate: components["schemas"]["MangaRelationRequest"] &
      unknown;
    /** MangaRelationRequest */
    MangaRelationRequest: {
      /** Format: uuid */
      targetManga?: string;
      relation?:
        | "monochrome"
        | "main_story"
        | "adapted_from"
        | "based_on"
        | "prequel"
        | "side_story"
        | "doujinshi"
        | "same_franchise"
        | "shared_universe"
        | "sequel"
        | "spin_off"
        | "alternate_story"
        | "alternate_version"
        | "preserialization"
        | "colored"
        | "serialization";
    };
    /** MangaRelationList */
    MangaRelationList: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["MangaRelation"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** MangaRelationResponse */
    MangaRelationResponse: {
      result?: "ok" | "error";
      /** @default entity */
      response?: string;
      data?: components["schemas"]["MangaRelation"];
    };
    /** MangaRelation */
    MangaRelation: {
      /** Format: uuid */
      id?: string;
      type?: "manga_relation";
      attributes?: components["schemas"]["MangaRelationAttributes"];
      relationships?: components["schemas"]["Relationship"][];
    };
    /** MangaRelationAttributes */
    MangaRelationAttributes: {
      relation?:
        | "monochrome"
        | "main_story"
        | "adapted_from"
        | "based_on"
        | "prequel"
        | "side_story"
        | "doujinshi"
        | "same_franchise"
        | "shared_universe"
        | "sequel"
        | "spin_off"
        | "alternate_story"
        | "alternate_version"
        | "preserialization"
        | "colored"
        | "serialization";
      version?: number;
    };
    /** MangaList */
    MangaList: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["Manga"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** CustomListList */
    CustomListList: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["CustomList"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** UserList */
    UserList: {
      /** @default ok */
      result?: string;
      /** @default collection */
      response?: string;
      data?: components["schemas"]["User"][];
      limit?: number;
      offset?: number;
      total?: number;
    };
    /** UploadSession */
    UploadSession: {
      /** Format: uuid */
      id?: string;
      type?: "upload_session";
      attributes?: components["schemas"]["UploadSessionAttributes"];
    };
    /** UploadSessionAttributes */
    UploadSessionAttributes: {
      isCommitted?: boolean;
      isProcessed?: boolean;
      isDeleted?: boolean;
      version?: number;
      createdAt?: string;
      updatedAt?: string;
    };
    /** UploadSessionFile */
    UploadSessionFile: {
      /** Format: uuid */
      id?: string;
      type?: "upload_session_file";
      attributes?: components["schemas"]["UploadSessionFileAttributes"];
    };
    /** UploadSessionFileAttributes */
    UploadSessionFileAttributes: {
      originalFileName?: string;
      fileHash?: string;
      fileSize?: number;
      mimeType?: string;
      source?: "local" | "remote";
      version?: number;
    };
    /** ChapterReadMarkersBatch */
    ChapterReadMarkerBatch: {
      chapterIdsRead?: string[];
      chapterIdsUnread?: string[];
    };
    /** BeginUploadSession */
    BeginUploadSession: {
      groups: string[];
      /** Format: uuid */
      manga: string;
    };
    /** BeginEditSession */
    BeginEditSession: {
      version: number;
    };
    /** BeginUploadSession */
    CommitUploadSession: {
      chapterDraft?: components["schemas"]["ChapterDraft"];
      /** @description ordered list of Upload Session File ids */
      pageOrder?: string[];
    };
    ChapterDraft: {
      volume: string | null;
      chapter: string | null;
      title: string | null;
      translatedLanguage: string;
      externalUrl?: string | null;
      publishAt?: string;
    };
  };
}

export interface operations {
  /** Search a list of Manga. */
  "get-search-manga": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        title?: string;
        "authors[]"?: string[];
        "artists[]"?: string[];
        /** Year of release */
        year?: number;
        "includedTags[]"?: string[];
        includedTagsMode?: "AND" | "OR";
        "excludedTags[]"?: string[];
        excludedTagsMode?: "AND" | "OR";
        "status[]"?: ("ongoing" | "completed" | "hiatus" | "cancelled")[];
        "originalLanguage[]"?: string[];
        "excludedOriginalLanguage[]"?: string[];
        "availableTranslatedLanguage[]"?: string[];
        "publicationDemographic[]"?: (
          | "shounen"
          | "shoujo"
          | "josei"
          | "seinen"
          | "none"
        )[];
        /** Manga ids (limited to 100 per request) */
        "ids[]"?: string[];
        "contentRating[]"?: (
          | "safe"
          | "suggestive"
          | "erotica"
          | "pornographic"
        )[];
        createdAtSince?: string;
        updatedAtSince?: string;
        order?: {
          title?: "asc" | "desc";
          year?: "asc" | "desc";
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
          latestUploadedChapter?: "asc" | "desc";
          followedCount?: "asc" | "desc";
          relevance?: "asc" | "desc";
        };
        "includes[]"?: string[];
        hasAvailableChapters?: "0" | "1" | "true" | "false";
        group?: string;
      };
    };
    responses: {
      /** Manga list */
      200: {
        content: {
          "application/json": components["schemas"]["MangaList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create a new Manga. */
  "post-manga": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** Manga Created */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 64KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MangaCreate"];
      };
    };
  };
  /** View Manga. */
  "get-manga-id": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
      query: {
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Manga no content */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "put-manga-id": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 64KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MangaEdit"] & {
          artists?: string[];
          authors?: string[];
        };
      };
    };
  };
  "delete-manga-id": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
    };
    responses: {
      /** Manga has been deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-auth-login": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Unauthorized */
      401: unknown;
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["Login"];
      };
    };
  };
  "get-auth-check": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CheckResponse"];
        };
      };
    };
  };
  "post-auth-logout": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LogoutResponse"];
        };
      };
      /** Service Unavailable */
      503: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-auth-refresh": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["RefreshResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RefreshToken"];
      };
    };
  };
  "post-account-create": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 4KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateAccount"];
      };
    };
  };
  "get-account-activate-code": {
    parameters: {
      path: {
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountActivateResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-search-group": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        /** ScanlationGroup ids (limited to 100 per request) */
        "ids[]"?: string[];
        name?: string;
        focusedLanguage?: string;
        "includes[]"?: string[];
        order?: {
          name?: "asc" | "desc";
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
          followedCount?: "asc" | "desc";
          relevance?: "asc" | "desc";
        };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-group": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 16KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateScanlationGroup"];
      };
    };
  };
  "get-group-id": {
    parameters: {
      path: {
        /** Scanlation Group ID */
        id: string;
      };
      query: {
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** ScanlationGroup not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "put-group-id": {
    parameters: {
      path: {
        /** Scanlation Group ID */
        id: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 8KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ScanlationGroupEdit"];
      };
    };
  };
  "delete-group-id": {
    parameters: {
      path: {
        /** Scanlation Group ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-group-id-follow": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "delete-group-id-follow": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-list": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 8KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomListCreate"];
      };
    };
  };
  "get-list-id": {
    parameters: {
      path: {
        /** CustomList ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListResponse"];
        };
      };
      /** CustomList not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** The size of the body is limited to 8KB. */
  "put-list-id": {
    parameters: {
      path: {
        /** CustomList ID */
        id: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CustomListEdit"];
      };
    };
  };
  "delete-list-id": {
    parameters: {
      path: {
        /** CustomList ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-manga-id-list-listId": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
        /** CustomList ID */
        listId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "delete-manga-id-list-listId": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
        /** CustomList ID */
        listId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** This will list public and private CustomList */
  "get-user-list": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListList"];
        };
      };
    };
  };
  /** This will list only public CustomList */
  "get-user-id-list": {
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CustomListList"];
        };
      };
    };
  };
  "get-user": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        /** User ids (limited to 100 per request) */
        "ids[]"?: string[];
        username?: string;
        order?: {
          username?: "asc" | "desc";
        };
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"];
        };
      };
    };
  };
  "get-user-id": {
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  "delete-user-id": {
    parameters: {
      path: {
        /** User ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  "post-user-delete-code": {
    parameters: {
      path: {
        /** User delete code */
        code: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  "post-user-password": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          oldPassword: string;
          newPassword: string;
        };
      };
    };
  };
  "post-user-email": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** Format: email */
          email: string;
        };
      };
    };
  };
  /** Chapter list. If you want the Chapters of a given Manga, please check the feed endpoints. */
  "get-chapter": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        /** Chapter ids (limited to 100 per request) */
        "ids[]"?: string[];
        title?: string;
        "groups[]"?: string[];
        uploader?: string | string[];
        manga?: string;
        "volume[]"?: string | string[];
        chapter?: string | string[];
        "translatedLanguage[]"?: string[];
        "originalLanguage[]"?: string[];
        "excludedOriginalLanguage[]"?: string[];
        "contentRating[]"?: (
          | "safe"
          | "suggestive"
          | "erotica"
          | "pornographic"
        )[];
        "excludedGroups[]"?: string[];
        "excludedUploaders[]"?: string[];
        includeFutureUpdates?: "0" | "1";
        createdAtSince?: string;
        updatedAtSince?: string;
        publishAtSince?: string;
        order?: {
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
          publishAt?: "asc" | "desc";
          volume?: "asc" | "desc";
          chapter?: "asc" | "desc";
        };
        includes?: string[];
      };
    };
    responses: {
      /** Chapter list */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-chapter-id": {
    parameters: {
      path: {
        /** Chapter ID */
        id: string;
      };
      query: {
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Chapter not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "put-chapter-id": {
    parameters: {
      path: {
        /** Chapter ID */
        id: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 32KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterEdit"];
      };
    };
  };
  "delete-chapter-id": {
    parameters: {
      path: {
        /** Chapter ID */
        id: string;
      };
    };
    responses: {
      /** Chapter has been deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-user-follows-manga-feed": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        "translatedLanguage[]"?: string[];
        "originalLanguage[]"?: string[];
        "excludedOriginalLanguage[]"?: string[];
        "contentRating[]"?: (
          | "safe"
          | "suggestive"
          | "erotica"
          | "pornographic"
        )[];
        "excludedGroups[]"?: string[];
        "excludedUploaders[]"?: string[];
        includeFutureUpdates?: "0" | "1";
        createdAtSince?: string;
        updatedAtSince?: string;
        publishAtSince?: string;
        order?: {
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
          publishAt?: "asc" | "desc";
          volume?: "asc" | "desc";
          chapter?: "asc" | "desc";
        };
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** User not Found */
      404: unknown;
    };
  };
  "get-list-id-feed": {
    parameters: {
      path: {
        id: string;
      };
      query: {
        limit?: number;
        offset?: number;
        "translatedLanguage[]"?: string[];
        "originalLanguage[]"?: string[];
        "excludedOriginalLanguage[]"?: string[];
        "contentRating[]"?: (
          | "safe"
          | "suggestive"
          | "erotica"
          | "pornographic"
        )[];
        "excludedGroups[]"?: string[];
        "excludedUploaders[]"?: string[];
        includeFutureUpdates?: "0" | "1";
        createdAtSince?: string;
        updatedAtSince?: string;
        publishAtSince?: string;
        order?: {
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
          publishAt?: "asc" | "desc";
          volume?: "asc" | "desc";
          chapter?: "asc" | "desc";
        };
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-manga-id-follow": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "delete-manga-id-follow": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-cover": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        /** Manga ids (limited to 100 per request) */
        "manga[]"?: string[];
        /** Covers ids (limited to 100 per request) */
        "ids[]"?: string[];
        /** User ids (limited to 100 per request) */
        "uploaders[]"?: string[];
        order?: {
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
          volume?: "asc" | "desc";
        };
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CoverList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-cover-id": {
    parameters: {
      path: {
        /** Is Manga UUID on POST */
        mangaOrCoverId: string;
      };
      query: {
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CoverResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** CoverArt not found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "edit-cover": {
    parameters: {
      path: {
        /** Is Manga UUID on POST */
        mangaOrCoverId: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CoverResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CoverEdit"];
      };
    };
  };
  "upload-cover": {
    parameters: {
      path: {
        /** Is Manga UUID on POST */
        mangaOrCoverId: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["CoverResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
          volume?: string | null;
          description?: string;
        };
      };
    };
  };
  "delete-cover": {
    parameters: {
      path: {
        /** Is Manga UUID on POST */
        mangaOrCoverId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-author": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        /** Author ids (limited to 100 per request) */
        "ids[]"?: string[];
        name?: string;
        order?: {
          name?: "asc" | "desc";
        };
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-author": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorCreate"];
      };
    };
  };
  "get-author-id": {
    parameters: {
      path: {
        /** Author ID */
        id: string;
      };
      query: {
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Author no content */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "put-author-id": {
    parameters: {
      path: {
        /** Author ID */
        id: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AuthorResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["AuthorEdit"];
      };
    };
  };
  "delete-author-id": {
    parameters: {
      path: {
        /** Author ID */
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-legacy-mapping": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** This response will give you an array of mappings of resource identifiers ; the `data.attributes.newId` field corresponds to the new UUID. */
      200: {
        content: {
          "application/json": components["schemas"]["MappingIdResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 10KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MappingIdBody"];
      };
    };
  };
  "get-manga-id-feed": {
    parameters: {
      path: {
        /** Manga ID */
        id: string;
      };
      query: {
        limit?: number;
        offset?: number;
        "translatedLanguage[]"?: string[];
        "originalLanguage[]"?: string[];
        "excludedOriginalLanguage[]"?: string[];
        "contentRating[]"?: (
          | "safe"
          | "suggestive"
          | "erotica"
          | "pornographic"
        )[];
        "excludedGroups[]"?: string[];
        "excludedUploaders[]"?: string[];
        includeFutureUpdates?: string;
        createdAtSince?: string;
        updatedAtSince?: string;
        publishAtSince?: string;
        order?: {
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
          publishAt?: "asc" | "desc";
          volume?: "asc" | "desc";
          chapter?: "asc" | "desc";
        };
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ChapterList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** A list of chapter ids that are marked as read for the specified manga */
  "get-manga-chapter-readmarkers": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok";
            data?: string[];
          };
        };
      };
    };
  };
  /** Send a lot of chapter ids for one manga to mark as read and/or unread */
  "post-manga-chapter-readmarkers": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok";
          };
        };
      };
    };
    /** The size of the body is limited to 10KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChapterReadMarkerBatch"];
      };
    };
  };
  /** A list of chapter ids that are marked as read for the given manga ids */
  "get-manga-chapter-readmarkers-2": {
    parameters: {
      query: {
        /** Manga ids */
        "ids[]": string[];
        /** Group results by manga ids */
        grouped?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok";
            data?: string[] | { [key: string]: string[] };
          };
        };
      };
    };
  };
  /** Mark chapter as read for the current user */
  "chapter-id-read": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok" | "error";
          };
        };
      };
      /** Unauthorized */
      401: unknown;
    };
  };
  /** Mark chapter as unread for the current user */
  "chapter-id-unread": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok" | "error";
          };
        };
      };
      /** Unauthorized */
      401: unknown;
    };
  };
  "get-manga-random": {
    parameters: {
      query: {
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
    };
  };
  "get-at-home-server-chapterId": {
    parameters: {
      path: {
        /** Chapter ID */
        chapterId: string;
      };
      query: {
        /**
         * Force selecting from MangaDex@Home servers that use the standard HTTPS port 443.
         *
         * While the conventional port for HTTPS traffic is 443 and servers are encouraged to use it, it is not a hard requirement as it technically isn't
         * anything special.
         *
         * However, some misbehaving school/office network will at time block traffic to non-standard ports, and setting this flag to `true` will ensure
         * selection of a server that uses these.
         */
        forcePort443?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            result?: string;
            /**
             * @description The base URL to construct final image URLs from.
             * The URL returned is valid for the requested chapter only, and for a duration of 15 minutes from the time of the response.
             */
            baseUrl?: string;
            chapter?: {
              hash?: string;
              data?: string[];
              dataSaver?: string[];
            };
          };
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-manga-tag": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["TagResponse"];
        };
      };
    };
  };
  "post-account-activate-resend": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountActivateResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 1KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendAccountActivationCode"];
      };
    };
  };
  /** You can only request Account Recovery once per Hour for the same Email Address */
  "post-account-recover": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountActivateResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": unknown;
        };
      };
    };
    /** The size of the body is limited to 1KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendAccountActivationCode"];
      };
    };
  };
  "post-account-recover-code": {
    parameters: {
      path: {
        code: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["AccountActivateResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["RecoverCompleteBody"];
      };
    };
  };
  "get-user-me": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserResponse"];
        };
      };
    };
  };
  "get-user-follows-group": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["ScanlationGroupList"];
        };
      };
    };
  };
  "get-user-follows-group-id": {
    parameters: {
      path: {
        /** Scanlation Group id */
        id: string;
      };
    };
    responses: {
      /** The User follow that Group */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** The User doesn't follow that Group */
      404: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  "get-user-follows-user": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UserList"];
        };
      };
    };
  };
  "get-user-follows-user-id": {
    parameters: {
      path: {
        /** User id */
        id: string;
      };
    };
    responses: {
      /** The User follow that User */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** The User doesn't follow that User */
      404: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  "get-user-follows-manga": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaList"];
        };
      };
    };
  };
  "get-user-follows-manga-id": {
    parameters: {
      path: {
        /** Manga id */
        id: string;
      };
    };
    responses: {
      /** The User follow that Manga */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** The User doesn't follow that Manga */
      404: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  "get-manga-status": {
    parameters: {
      query: {
        /** Used to filter the list by given status */
        status?:
          | "reading"
          | "on_hold"
          | "plan_to_read"
          | "dropped"
          | "re_reading"
          | "completed";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            result?: string;
            statuses?: {
              [key: string]:
                | "reading"
                | "on_hold"
                | "plan_to_read"
                | "dropped"
                | "re_reading"
                | "completed";
            };
          };
        };
      };
    };
  };
  "get-manga-id-status": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            result?: string;
            status?:
              | "reading"
              | "on_hold"
              | "plan_to_read"
              | "dropped"
              | "re_reading"
              | "completed";
          };
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-manga-id-status": {
    parameters: {
      path: {
        id: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** Using a `null` value in `status` field will remove the Manga reading status. The size of the body is limited to 2KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateMangaStatus"];
      };
    };
  };
  "get-manga-id-draft": {
    parameters: {
      path: {
        id: string;
      };
      query: {
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "commit-manga-draft": {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** OK */
      201: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** BadRequest */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** A Manga Draft that is to be submitted must have at least one cover, must be in the "draft" state and must be passed the correct version in the request body. */
    requestBody: {
      content: {
        "application/json": {
          version?: number;
        };
      };
    };
  };
  "get-manga-drafts": {
    parameters: {
      query: {
        limit?: number;
        offset?: number;
        user?: string;
        state?: "draft" | "submitted" | "rejected";
        order?: {
          title?: "asc" | "desc";
          year?: "asc" | "desc";
          createdAt?: "asc" | "desc";
          updatedAt?: "asc" | "desc";
        };
        "includes[]"?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["MangaResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /**
   * Captchas can be solved explicitly through this endpoint, another way is to add a `X-Captcha-Result` header to any request. The same logic will verify the captcha and is probably more convenient because it takes one less request.
   *
   * Authentication is optional. Captchas are tracked for both the client ip and for the user id, if you are logged in you want to send your session token but that is not required.
   */
  "post-captcha-solve": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK: Captcha has been solved */
      200: {
        content: {
          "application/json": {
            result?: "ok" | "error";
          };
        };
      };
      /** Bad Request: Captcha challenge result was wrong, the Captcha Verification service was down or other, refer to the error message and the errorCode inside the error context */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          captchaChallenge: string;
        };
      };
    };
  };
  "get-report-reasons-by-category": {
    parameters: {
      path: {
        category: "manga" | "chapter" | "scanlation_group" | "user" | "author";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            result?: string;
            /** @default collection */
            response?: string;
            data?: {
              /** Format: uuid */
              id?: string;
              /** @default report_reason */
              type?: string;
              attributes?: {
                reason?: components["schemas"]["LocalizedString"];
                detailsRequired?: boolean;
                category?:
                  | "manga"
                  | "chapter"
                  | "scanlation_group"
                  | "user"
                  | "author";
                version?: number;
              };
            }[];
            limit?: number;
            offset?: number;
            total?: number;
          };
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-report": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** Created */
      201: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 8KB. */
    requestBody: {
      content: {
        "application/json": {
          category?:
            | "manga"
            | "chapter"
            | "user"
            | "scanlation_group"
            | "author";
          /** Format: uuid */
          reason?: string;
          /** Format: uuid */
          objectId?: string;
          details?: string;
        };
      };
    };
  };
  "get-upload-session": {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UploadSession"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "begin-upload-session": {
    parameters: {
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UploadSession"];
        };
      };
    };
    /** The size of the body is limited to 4KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeginUploadSession"];
      };
    };
  };
  "begin-edit-session": {
    parameters: {
      path: {
        chapterId: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["UploadSession"];
        };
      };
      /** Bad Request if Chapter's Manga is unpublished */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Unauthorized if user does not have upload permissions or has no rights to edit the chapter (needs to be uploader or group member) */
      401: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 1KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["BeginEditSession"];
      };
    };
  };
  "put-upload-session-file": {
    parameters: {
      path: {
        uploadSessionId: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": {
            result?: "ok" | "error";
            errors?: components["schemas"]["Error"][];
            data?: components["schemas"]["UploadSessionFile"][];
          };
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": {
          /** Format: binary */
          file?: string;
        };
      };
    };
  };
  "abandon-upload-session": {
    parameters: {
      path: {
        uploadSessionId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  "commit-upload-session": {
    parameters: {
      path: {
        uploadSessionId: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Chapter"];
        };
      };
    };
    /** The size of the body is limited to 4KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["CommitUploadSession"];
      };
    };
  };
  "delete-uploaded-session-file": {
    parameters: {
      path: {
        uploadSessionId: string;
        uploadSessionFileId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
  };
  "delete-uploaded-session-files": {
    parameters: {
      path: {
        uploadSessionId: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
    };
    /** The size of the body is limited to 20KB. */
    requestBody: {
      content: {
        "application/json": string[];
      };
    };
  };
  "get-manga-relation": {
    parameters: {
      path: {
        mangaId: string;
      };
      query: {
        "includes[]"?: string[];
      };
    };
    responses: {
      /** Manga relation list */
      200: {
        content: {
          "application/json": components["schemas"]["MangaRelationList"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  /** Create a new Manga relation. */
  "post-manga-relation": {
    parameters: {
      path: {
        mangaId: string;
      };
      header: {
        "Content-Type": string;
      };
    };
    responses: {
      /** Manga relation created */
      200: {
        content: {
          "application/json": components["schemas"]["MangaRelationResponse"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    /** The size of the body is limited to 8KB. */
    requestBody: {
      content: {
        "application/json": components["schemas"]["MangaRelationCreate"];
      };
    };
  };
  "delete-manga-relation-id": {
    parameters: {
      path: {
        mangaId: string;
        id: string;
      };
    };
    responses: {
      /** Manga relation has been deleted. */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-rating": {
    parameters: {
      query: {
        manga: string[];
      };
    };
    responses: {
      /** Self-rating list */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            result?: string;
            ratings?: {
              [key: string]: {
                rating?: number;
                /** Format: date-time */
                createdAt?: string;
              };
            };
          };
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "post-rating-manga-id": {
    parameters: {
      path: {
        mangaId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": {
          rating?: number;
        };
      };
    };
  };
  "delete-rating-manga-id": {
    parameters: {
      path: {
        mangaId: string;
      };
    };
    responses: {
      /** Manga rating was deleted */
      200: {
        content: {
          "application/json": components["schemas"]["Response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["ErrorResponse"];
        };
      };
    };
  };
  "get-statistics-manga-uuid": {
    parameters: {
      path: {
        uuid: string;
      };
    };
    responses: {
      /** Statistics */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            result?: string;
            statistics?: {
              [key: string]: {
                rating?: {
                  /** @description Will be nullable if no ratings has been done */
                  average?: number | null;
                  distribution?: {
                    "1"?: number;
                    "2"?: number;
                    "3"?: number;
                    "4"?: number;
                    "5"?: number;
                    "6"?: number;
                    "7"?: number;
                    "8"?: number;
                    "9"?: number;
                    "10"?: number;
                  };
                };
                follows?: number;
              };
            };
          };
        };
      };
    };
  };
  "get-statistics-manga": {
    parameters: {
      query: {
        manga: string[];
      };
    };
    responses: {
      /** Statistics */
      200: {
        content: {
          "application/json": {
            /** @default ok */
            result?: string;
            statistics?: {
              [key: string]: {
                rating?: {
                  /** @description Will be nullable if no ratings has been done */
                  average?: number | null;
                };
                follows?: number;
              };
            };
          };
        };
      };
    };
  };
}

export interface external {}
